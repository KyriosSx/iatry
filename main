import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import pandas as pd
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
import numpy as np

class ARIMA_Model:


    def __init__(self, master):
        self.master = master
        master.title("ARIMA Model")

        self.history_button = tk.Button(master, text="Select File", command=self.select_history)
        self.history_button.grid(row=0, column=0, padx=5, pady=5)

        self.future_results_button = tk.Button(master, text="Select File", command=self.select_future_results)
        self.future_results_button.grid(row=1, column=0, padx=5, pady=5)

        self.predict_button = tk.Button(master, text="Predict", command=self.predict)
        self.predict_button.grid(row=2, column=0, padx=5, pady=5)

        self.save_button = tk.Button(master, text="Save Predictions", command=self.save_predictions)
        self.save_button.grid(row=2, column=1, padx=5, pady=5)

    def select_history(self):
        # Open a file dialog to select a history file
        self.history_file = tk.filedialog.askopenfilename()

    def select_future_results(self):
        # Open a file dialog to select a future results file
        self.future_results_file = tk.filedialog.askopenfilename()

    def predict(self):
        # Read the history file
        history = pd.read_csv(self.history_file)
        history = history.iloc[:, 1:2].values

        # Read the future results file
        future_results = pd.read_csv(self.future_results_file)
        future_results = future_results.iloc[:, 1:2].values

        # Combine the history and future results
        data = pd.concat([pd.DataFrame(history), pd.DataFrame(future_results)])
        data = data.values

        # Create and fit the ARIMA model
        model = ARIMA(data, order=(1,0,0))
        model_fit = model.fit()

        # Make predictions
        predictions = model_fit.predict(len(data), len(data) + 5)

        # Calculate the mean squared error
        mse = mean_squared_error(future_results, predictions)

        # Display the mean squared error
        self.mse_label = tk.Label(self.master, text="Mean Squared Error: " + str(mse))
        self.mse_label.grid(row=3, column=0, padx=5, pady=5)

        # Display the predictions
        self.predictions_label = tk.Label(self.master, text="Predictions: " + str(predictions))
        self.predictions_label.grid(row=4, column=0, padx=5, pady=5)



    def make_predictions(self):
        # Make predictions for the next 30 days
        predictions = self.model.predict(n_periods=30)
        # Clear the predictions listbox
        self.predictions_listbox.delete(0, tk.END)
        # Insert the predictions into the listbox
        for prediction in predictions:
            self.predictions_listbox.insert(tk.END, prediction)
        # Calculate the mean squared error
        mse = mean_squared_error(self.future_results, predictions)
        # Display the mean squared error
        self.mse_label.config(text="MSE: {:.2f}".format(mse))

    def save_predictions(self):
        # Save the predictions to a CSV file
        with open("predictions.csv", "w") as f:
            for prediction in self.predictions_listbox.get(0, tk.END):
                f.write("{}\n".format(prediction))

        def main():
            root = Tk()
            model = ARIMA_Model(root)
            root.mainloop()

        if __name__ == "__main__":
            main()
